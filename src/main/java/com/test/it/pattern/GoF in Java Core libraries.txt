Java核心库里面的模式:
http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries

====================
Creational Patterns
====================

----------------------
1. Abstract factory
----------------------
recognizeable by creational methods returning the factory itself which in turn can be used to create another abstract/interface type

javax.xml.parsers.DocumentBuilderFactory#newInstance()
javax.xml.transform.TransformerFactory#newInstance()
javax.xml.xpath.XPathFactory#newInstance()

------------
2. Builder
------------
recognizeable by creational methods returning the instance itself

java.lang.StringBuilder#append() (unsynchronized)
java.lang.StringBuffer#append() (synchronized)
java.nio.ByteBuffer#put() (also on CharBuffer, ShortBuffer, IntBuffer, LongBuffer, FloatBuffer and DoubleBuffer)
javax.swing.GroupLayout.Group#addComponent()
All implementations of java.lang.Appendable

-------------------
3. Factory method
-------------------
recognizeable by creational methods returning an implementation of an abstract/interface type

java.util.Calendar#getInstance()
java.util.ResourceBundle#getBundle()
java.text.NumberFormat#getInstance()
java.nio.charset.Charset#forName()
java.net.URLStreamHandlerFactory#createURLStreamHandler(String) (Returns singleton object per protocol)

--------------
4. Prototype
--------------
recognizeable by creational methods returning a different instance of itself with the same properties

java.lang.Object#clone() (the class has to implement java.lang.Cloneable)

--------------
5. Singleton
--------------
recognizeable by creational methods returning the same instance (usually of itself) everytime

java.lang.Runtime#getRuntime()
java.awt.Desktop#getDesktop()
java.lang.System#getSecurityManager()

====================
Structural patterns
====================

------------
1. Adapter
------------
recognizeable by creational methods taking an instance of different abstract/interface type and returning an implementation of own/another abstract/interface type which decorates/overrides the given instance

java.util.
#asList()
java.io.InputStreamReader(InputStream) (returns a Reader)
java.io.OutputStreamWriter(OutputStream) (returns a Writer)
javax.xml.bind.annotation.adapters.XmlAdapter#marshal() and #unmarshal()
Bridge (recognizeable by creational methods taking an instance of different abstract/interface type and returning an implementation of own abstract/interface type which delegates/uses the given instance)

None comes to mind yet. A fictive example would be new LinkedHashMap(LinkedHashSet<K>, List<V>) which returns an unmodifiable linked map which doesn't clone the items, but uses them. The java.util.Collections#newSetFromMap() and singletonXXX() methods however comes close.

2. Composite (recognizeable by behavioral methods taking an instance of same abstract/interface type into a tree structure)

java.awt.Container#add(Component) (practically all over Swing thus)
javax.faces.component.UIComponent#getChildren() (practically all over JSF UI thus)
Decorator (recognizeable by creational methods taking an instance of same abstract/interface type which adds additional behaviour)

All subclasses of java.io.InputStream, OutputStream, Reader and Writer have a constructor taking an instance of same type.
java.util.Collections, the checkedXXX(), synchronizedXXX() and unmodifiableXXX() methods.
javax.servlet.http.HttpServletRequestWrapper and HttpServletResponseWrapper

3. Facade (recognizeable by behavioral methods which internally uses instances of different independent abstract/interface types)

javax.faces.context.FacesContext, it internally uses among others the abstract/interface types LifeCycle, ViewHandler, NavigationHandler and many more without that the enduser has to worry about it (which are however overrideable by injection).
javax.faces.context.ExternalContext, which internally uses ServletContext, HttpSession, HttpServletRequest, HttpServletResponse, etc.

4. Flyweight (recognizeable by creational methods returning a cached instance, a bit the "multiton" idea)

java.lang.Integer#valueOf(int) (also on Boolean, Byte, Character, Short and Long)

5. Proxy (recognizeable by creational methods which returns an implementation of given abstract/interface type which in turn delegates/uses a different implementation of given abstract/interface type)

java.lang.reflect.Proxy
java.rmi.*, the whole API actually.

====================
Behavioral patterns
====================

1. Chain of responsibility (recognizeable by behavioral methods which (indirectly) invokes the same method in another implementation of same abstract/interface type in a queue)

java.util.logging.Logger#log()
javax.servlet.Filter#doFilter()

2. Command (recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a different abstract/interface type which has been encapsulated by the command implementation during its creation)

All implementations of java.lang.Runnable
All implementations of javax.swing.Action

3. Interpreter (recognizeable by behavioral methods returning a structurally different instance/type of the given instance/type; note that parsing/formatting is not part of the pattern, determining the pattern and how to apply it is)

java.util.Pattern
java.text.Normalizer
All subclasses of java.text.Format
All subclasses of javax.el.ELResolver

4. Iterator (recognizeable by behavioral methods sequentially returning instances of a different type from a queue)

All implementations of java.util.Iterator (thus among others also java.util.Scanner!).
All implementations of java.util.Enumeration

5. Mediator (recognizeable by behavioral methods taking an instance of different abstract/interface type (usually using the command pattern) which delegates/uses the given instance)

java.util.Timer (all scheduleXXX() methods)
java.util.concurrent.Executor#execute()
java.util.concurrent.ExecutorService (the invokeXXX() and submit() methods)
java.util.concurrent.ScheduledExecutorService (all scheduleXXX() methods)
java.lang.reflect.Method#invoke()

6. Memento (recognizeable by behavioral methods which internally changes the state of the whole instance)

java.util.Date (the setter methods do that, Date is internally represented by a long value)
All implementations of java.io.Serializable
All implementations of javax.faces.component.StateHolder

7. Observer (or Publish/Subscribe) (recognizeable by behavioral methods which invokes a method on an instance of another abstract/interface type, depending on own state)

java.util.Observer/java.util.Observable (rarely used in real world though)
All implementations of java.util.EventListener (practically all over Swing thus)
javax.servlet.http.HttpSessionBindingListener
javax.servlet.http.HttpSessionAttributeListener
javax.faces.event.PhaseListener

8. State (recognizeable by behavioral methods which changes its behaviour depending on the instance's state which can be controlled externally)

javax.faces.lifecycle.LifeCycle#execute() (controlled by FacesServlet, the behaviour is dependent on current phase (state) of JSF lifecycle)

9. Strategy (recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a different abstract/interface type which has been passed-in as method argument into the strategy implementation)

java.util.Comparator#compare(), executed by among others Collections#sort().
javax.servlet.http.HttpServlet, the service() and all doXXX() methods take HttpServletRequest and HttpServletResponse and the implementor has to process them (and not to get hold of them as instance variables!).
javax.servlet.Filter#doFilter()

10. Template method (recognizeable by behavioral methods which already have a "default" behaviour definied by an abstract type)

All non-abstract methods of java.io.InputStream, java.io.OutputStream, java.io.Reader and java.io.Writer.
All non-abstract methods of java.util.AbstractList, java.util.AbstractSet and java.util.AbstractMap.
javax.servlet.http.HttpServlet, all the doXXX() methods by default sends a HTTP 405 "Method Not Allowed" error to the response. You're free to implement none or any of them.

11. Visitor (recognizeable by two different abstract/interface types which has methods definied which takes each the other abstract/interface type; the one actually calls the method of the other and the other executes the desired strategy on it)

javax.lang.model.element.AnnotationValue and AnnotationValueVisitor
javax.lang.model.element.Element and ElementVisitor
javax.lang.model.type.TypeMirror and TypeVisitor
java.nio.file.FileVisitor and SimpleFileVisitor


------------------
Observer pattern throughout whole swing (Observable, Observer)
MVC also in swing
Adapter pattern: InputStreamReader and OutputStreamWriter NOTE: ContainerAdapter, ComponentAdapter, FocusAdapter, KeyAdapter, MouseAdapter are not adapters; they are actually Null Objects. Poor naming choice by Sun.
Decorator pattern (BufferedInputStream can decorate other streams such as FilterInputStream)
AbstractFactory Pattern for the AWT Toolkit and the Swing pluggable look-and-feel classes
java.lang.Runtime#getRuntime() is Singleton
ButtonGroup for Mediator pattern
Action, AbstractAction may be used for different visual represntations to execute same code -> Command pattern
Interned Strings or CellRender in JTable for Flyweight Pattern (Also think about various pools - Thread pools, connection pools, EJB object pools - Flyweight is really about management of shared resources)
The Java 1.0 event model is an example of Chain of Responsibility, as are Servlet Filters.
Iterator pattern in Collections Framework
Nested containers in AWT/Swing use the Composite pattern
Layout Managers in AWT/Swing are an example of Strategy

Flyweight is used with some values of Byte, Short, Integer, Long and String.
Facade is used in many place but the most obvious is Scripting interfaces.
Singleton - java.lang.Runtime comes to mind.
Abstract Factory - Also Scripting and JDBC API.
Command - TextComponent's Undo/Redo.
Interpreter - RegEx (java.util.regex.) and SQL (java.sql.) API.
Prototype - Not 100% sure if this count, but I thinkg clone() method can be used for this purpose.


RMI is based on Proxy.

Should be possible to cite one for most of the 23 patterns in GoF:

Abstract Factory: java.sql interfaces all get their concrete implementations from JDBC JAR when driver is registered.
Builder: java.lang.StringBuilder.
Factory Method: XML factories, among others.
Prototype: Maybe clone(), but I'm not sure I'm buying that.
Singleton: java.lang.System
Adapter: Adapter classes in java.awt.event, e.g., WindowAdapter.
Bridge: Collection classes in java.util. List implemented by ArrayList.
Composite: java.awt. java.awt.Component + java.awt.Container
Decorator: All over the java.io package.
Facade: ExternalContext behaves as a facade for performing cookie, session scope and similar operations.
Flyweight: Integer, Character, etc.
Proxy: java.rmi package
Chain of Responsibility: Servlet filters
Command: Swing menu items
Interpreter: No directly in JDK, but JavaCC certainly uses this.
Iterator: java.util.Iterator interface; can't be clearer than that.
Mediator: JMS?
Memento:
Observer: java.util.Observer/Observable (badly done, though)
State:
Strategy:
Template:
Visitor:
I can't think of examples in Java for 10 out of the 23, but I'll see if I can do better tomorrow. That's what edit is for.

